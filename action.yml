name: Run AER Tests
description: Run Apex tests with the AER CLI.
author: October Swimmer
branding:
  color: blue
  icon: play
inputs:
  source:
    description: Path(s) passed to `aer test` (typically your Apex source directory/directories). Can be a single path, multiple space-separated paths, or multiple newline-separated paths.
    required: false
    default: .
  flags:
    description: Additional flags appended after the source argument.
    required: false
    default: ""
  version:
    description: Release tag of the AER binary to install (for example `v1.2.3`). Use `latest` to resolve dynamically.
    required: false
    default: latest
runs:
  using: composite
  steps:
    - name: Resolve release tag
      id: resolve
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        set -euo pipefail
        action_repo="${{ github.action_repository }}"
        if [[ -z "${action_repo}" ]]; then
          action_repo="octoberswimmer/aer-dist"
        fi
        go run ./cmd/actions/resolve \
          --requested "${{ inputs.version }}" \
          --repo "${action_repo}" \
          --fallback "${{ github.repository }}"

    - name: Install aer CLI
      id: install
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        ACTION_REPO: ${{ steps.resolve.outputs.repo }}
        VERSION: ${{ steps.resolve.outputs.version }}
        RUNNER_OS: ${{ runner.os }}
        RUNNER_ARCH: ${{ runner.arch }}
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        set -euo pipefail
        dest="${RUNNER_TEMP}/aer"
        go run ./cmd/actions/install \
          --repo "${ACTION_REPO}" \
          --version "${VERSION}" \
          --runner-os "${RUNNER_OS}" \
          --runner-arch "${RUNNER_ARCH}" \
          --dest "${dest}"

    - name: Run aer test
      shell: bash
      env:
        SOURCE: ${{ inputs.source }}
        FLAGS: ${{ inputs.flags }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        set -euo pipefail

        if [[ -z "${SOURCE}" ]]; then
          echo "The source input cannot be empty." >&2
          exit 1
        fi

        # Parse SOURCE into array, handling both newline-separated and space-separated paths
        paths=()
        while IFS= read -r line; do
          # Trim whitespace and skip empty lines
          line=$(echo "$line" | xargs)
          [[ -n "$line" ]] && paths+=("$line")
        done <<< "${SOURCE}"

        # If we got exactly one element containing spaces, split by spaces for backward compatibility
        if [[ ${#paths[@]} -eq 1 && "${paths[0]}" == *" "* ]]; then
          IFS=' ' read -ra paths <<< "${paths[0]}"
        fi

        if [[ ${#paths[@]} -eq 0 ]]; then
          echo "The source input cannot be empty." >&2
          exit 1
        fi

        if [[ -z "${FLAGS}" ]]; then
          aer test "${paths[@]}"
        else
          # shellcheck disable=SC2086
          aer test "${paths[@]}" ${FLAGS}
        fi
